name: CMake
env:
 # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  PRJ_NAME: "IP_Filter" # name without spaces
  PRJ_VERSION_MAJOR: 0
  PRJ_VERSION_MINOR: 0
  PRJ_VERSION_PATCH: ${{ github.run_number }}
  PRJ_DESCRIPTION: "IP_filter_sort_and_filter_ip_string_from_file" # description without spaces
  PRJ_HOMEPAGE_URL: "${{ github.server_url }}//${{ github.repository }}"
  PRJ_CMAKE_MIN_VERSION: 3.2
  EMAIL_CONTACT: dmitrii.lozovoi@yandex.ru
  GOOGLE_TEST: ON
  BUILD_TYPE: Release

on:
  push:
    #branches: [ "main" ]
  pull_request:
    #branches: [ "main" ]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - run: |
          sudo apt-get update && sudo apt-get install && sudo apt-get install libgtest-dev -y
      if: env.GOOGLE_TEST == 'ON'
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
